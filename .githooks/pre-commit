#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}  🔍 Running Pre-Commit Checks...${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

# Get list of staged PHP files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$')

if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}✓ No PHP files to check${NC}"
    exit 0
fi

echo -e "${YELLOW}→ Found $(echo "$STAGED_FILES" | wc -l | xargs) PHP file(s) to check${NC}"
echo ""

# Flag to track if any check fails
FAILED=0

# ============================================================================
# 1. Check for syntax errors
# ============================================================================
echo -e "${BLUE}[1/3]${NC} Checking PHP syntax..."

for FILE in $STAGED_FILES; do
    if [ -f "$FILE" ]; then
        docker compose exec -T php php -l "$FILE" > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo -e "${RED}✗ Syntax error in: $FILE${NC}"
            docker compose exec -T php php -l "$FILE"
            FAILED=1
        fi
    fi
done

if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}✓ PHP syntax check passed${NC}"
fi
echo ""

# ============================================================================
# 2. Run Laravel Pint (code style fixer)
# ============================================================================
echo -e "${BLUE}[2/3]${NC} Running Laravel Pint (code style)..."

# Create a temporary file list for Pint
TEMP_FILE=$(mktemp)
echo "$STAGED_FILES" > "$TEMP_FILE"

# Run Pint on staged files
if docker compose exec -T php ./vendor/bin/pint --test $(echo $STAGED_FILES | tr '\n' ' ') 2>/dev/null; then
    echo -e "${GREEN}✓ Code style check passed${NC}"
else
    echo -e "${YELLOW}⚠ Code style issues found. Running Pint to fix...${NC}"
    docker compose exec -T php ./vendor/bin/pint $(echo $STAGED_FILES | tr '\n' ' ')

    if [ $? -eq 0 ]; then
        # Re-stage the fixed files
        for FILE in $STAGED_FILES; do
            git add "$FILE"
        done
        echo -e "${GREEN}✓ Code style fixed and re-staged${NC}"
    else
        echo -e "${RED}✗ Failed to fix code style issues${NC}"
        FAILED=1
    fi
fi

rm -f "$TEMP_FILE"
echo ""

# ============================================================================
# 3. Check for common issues
# ============================================================================
echo -e "${BLUE}[3/3]${NC} Checking for common issues..."

# Check for debug statements
DEBUG_PATTERNS="dd\(|dump\(|var_dump\(|print_r\(|console\.log\("
DEBUG_FOUND=$(git diff --cached | grep -E "^\+.*($DEBUG_PATTERNS)")

if [ -n "$DEBUG_FOUND" ]; then
    echo -e "${RED}✗ Debug statements found:${NC}"
    echo "$DEBUG_FOUND"
    echo ""
    echo -e "${YELLOW}Please remove debug statements before committing.${NC}"
    FAILED=1
else
    echo -e "${GREEN}✓ No debug statements found${NC}"
fi

# Check for merge conflict markers
CONFLICT_MARKERS=$(git diff --cached | grep -E "^\+(<<<<<<< |=======$|>>>>>>> )")
if [ -n "$CONFLICT_MARKERS" ]; then
    echo -e "${RED}✗ Merge conflict markers found${NC}"
    FAILED=1
fi

# Check for TODO/FIXME in added lines
TODO_FOUND=$(git diff --cached | grep -E "^\+.*(@TODO|TODO:|FIXME:)" | grep -v "pre-commit")
if [ -n "$TODO_FOUND" ]; then
    echo -e "${YELLOW}⚠ TODO/FIXME comments found (warning only):${NC}"
    echo "$TODO_FOUND"
fi

echo ""

# ============================================================================
# Summary
# ============================================================================
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

if [ $FAILED -eq 1 ]; then
    echo -e "${RED}✗ Pre-commit checks failed!${NC}"
    echo -e "${YELLOW}  Fix the issues above and try committing again.${NC}"
    echo -e "${YELLOW}  Or use --no-verify to skip these checks (not recommended).${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    exit 1
fi

echo -e "${GREEN}✓ All pre-commit checks passed!${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

exit 0
