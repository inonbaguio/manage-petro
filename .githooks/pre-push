#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}  🧪 Running Pre-Push Checks...${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

# Get the remote and branch being pushed to
remote="$1"
url="$2"

# Get current branch name
current_branch=$(git symbolic-ref --short HEAD 2>/dev/null)

echo -e "${YELLOW}→ Pushing to: $remote${NC}"
echo -e "${YELLOW}→ Current branch: $current_branch${NC}"
echo ""

# Flag to track if any check fails
FAILED=0

# ============================================================================
# 1. Check if working directory is clean
# ============================================================================
echo -e "${BLUE}[1/4]${NC} Checking working directory..."

if [ -n "$(git status --porcelain)" ]; then
    echo -e "${YELLOW}⚠ Warning: You have uncommitted changes${NC}"
    echo -e "${YELLOW}  Consider committing or stashing them before pushing${NC}"
else
    echo -e "${GREEN}✓ Working directory is clean${NC}"
fi
echo ""

# ============================================================================
# 2. Run PHPUnit tests
# ============================================================================
echo -e "${BLUE}[2/4]${NC} Running PHPUnit tests..."

# Check if we should skip tests based on environment variable
if [ "$SKIP_TESTS" = "1" ]; then
    echo -e "${YELLOW}⚠ Skipping tests (SKIP_TESTS=1)${NC}"
else
    # Clear config cache before running tests
    docker compose exec -T php php artisan config:clear > /dev/null 2>&1

    # Run PHPUnit tests
    if docker compose exec -T php php artisan test --parallel; then
        echo -e "${GREEN}✓ All tests passed${NC}"
    else
        echo -e "${RED}✗ Tests failed!${NC}"
        FAILED=1
    fi
fi
echo ""

# ============================================================================
# 3. Check for sensitive information
# ============================================================================
echo -e "${BLUE}[3/4]${NC} Checking for sensitive information..."

# Get list of files being pushed
FILES_TO_PUSH=$(git diff --name-only @{u}.. 2>/dev/null)

if [ -z "$FILES_TO_PUSH" ]; then
    # If no upstream branch, check all files in the commit
    FILES_TO_PUSH=$(git diff --name-only HEAD~1..HEAD 2>/dev/null)
fi

SENSITIVE_FOUND=0

# Patterns to check for sensitive data
declare -a SENSITIVE_PATTERNS=(
    "password.*=.*['\"][^'\"]{3,}['\"]"
    "api[_-]?key.*=.*['\"][^'\"]{10,}['\"]"
    "secret.*=.*['\"][^'\"]{10,}['\"]"
    "token.*=.*['\"][^'\"]{10,}['\"]"
    "aws[_-]?access[_-]?key"
    "private[_-]?key.*BEGIN"
    "DB_PASSWORD=.{3,}"
)

for FILE in $FILES_TO_PUSH; do
    # Skip certain files that are allowed to have sensitive-looking patterns
    if [ -f "$FILE" ] && \
       [ "$FILE" != ".env.example" ] && \
       [ "$FILE" != ".githooks/pre-push" ] && \
       [[ ! "$FILE" =~ database/seeders/ ]]; then
        for PATTERN in "${SENSITIVE_PATTERNS[@]}"; do
            if grep -qiE "$PATTERN" "$FILE" 2>/dev/null; then
                echo -e "${RED}✗ Potential sensitive data in: $FILE${NC}"
                SENSITIVE_FOUND=1
                break
            fi
        done
    fi
done

if [ $SENSITIVE_FOUND -eq 0 ]; then
    echo -e "${GREEN}✓ No sensitive information detected${NC}"
else
    echo -e "${RED}✗ Sensitive information detected!${NC}"
    echo -e "${YELLOW}  Please review the files and remove sensitive data${NC}"
    FAILED=1
fi
echo ""

# ============================================================================
# 4. Check for large files
# ============================================================================
echo -e "${BLUE}[4/4]${NC} Checking for large files..."

LARGE_FILES=$(git diff --name-only @{u}.. 2>/dev/null | while read FILE; do
    if [ -f "$FILE" ]; then
        SIZE=$(wc -c < "$FILE" 2>/dev/null || echo 0)
        if [ "$SIZE" -gt 1048576 ]; then  # 1MB
            echo "$FILE ($(numfmt --to=iec-i --suffix=B $SIZE 2>/dev/null || echo $SIZE bytes))"
        fi
    fi
done)

if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}⚠ Large files detected:${NC}"
    echo "$LARGE_FILES"
    echo -e "${YELLOW}  Consider using Git LFS for large files${NC}"
else
    echo -e "${GREEN}✓ No large files detected${NC}"
fi
echo ""

# ============================================================================
# Summary
# ============================================================================
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

if [ $FAILED -eq 1 ]; then
    echo -e "${RED}✗ Pre-push checks failed!${NC}"
    echo -e "${YELLOW}  Fix the issues above before pushing.${NC}"
    echo -e "${YELLOW}  Or use --no-verify to skip these checks (not recommended).${NC}"
    echo -e "${YELLOW}  Or set SKIP_TESTS=1 to skip test execution.${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    exit 1
fi

echo -e "${GREEN}✓ All pre-push checks passed!${NC}"
echo -e "${GREEN}  Proceeding with push...${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

exit 0
